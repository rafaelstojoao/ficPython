# -*- coding: utf-8 -*-
"""IPCD Aula 01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owYXnigwwq1RzxKSDK_Tk3sh6GoRmiX7

# Introdu√ß√£o ao  Python com Ci√™ncia de Dados

Professores:
* Felipe Cavenaghi
* Rafael Stoffalette Joao

## Ementa
1. Python: 
  * Ambiente de Programa√ß√£o
  * tipos de dados, sequ√™ncias e opera√ß√µes, estruturas de controle e repeti√ß√£o
  * Python: refer√™ncias, fun√ß√µes, fun√ß√µes avan√ßadas e comprehention
  * Python: I/O e no√ß√µes b√°sicas de classes e objetos
2. Numpy: 
   * array, slicing, fancy index, copy e view
   * opera√ß√µes com array, broadcasting
3. Pandas: 
   * dataframes, series, index, Pandas I/O (csv, json, excell)
   * limpeza de dados
4. Matplotlib:  constru√ß√£o de gr√°ficos
5. Introdu√ß√£o ao aprendizado de m√°quina
6. Introdu√ß√£o ao processamento de linguagem Natural com NTKL

# Aula 01: Introdu√ß√£o ao Python

* O que √© Python
* Vari√°veis e atribui√ß√£o
* Tipos de dados
  * Tipos b√°sicos
  * Tipos sequ√™ncias
  * dicion√°rios
5. Escrita e leitura de arquivos
6. sqlite

## Python
* Linguagem din√¢mica e interpretada
  * Tarefas s√£o realizadas em tempo de execu√ß√£o 
  * C√≥digo executado diretamente ao inv√©s de ser compilado.

* Multi-paradgima

  * Imperativo: programas compreendem uma sequ√™ncia de declara√ß√µes
  * Orientada a objetos: permite modelos de classes para manipular objetos
  * Procedural: c√≥digo pode ser agrupado em unidades chamadas fun√ß√µes
  * Funcional: Python nativamente permite fun√ß√µes de primeira classe, lambdas an√¥nimos, comprehensions e geradores.

* Ampla comunidade trabalhando e compartilhando c√≥digo

## Vari√°veis e atribui√ß√£o

A atribui√ß√£o √© feita diretamente

Sem necessidade de declarar o tipo de vari√°vel

O Pr√≥prio Python se encarrega de descobrir o tipo de vari√°vel
"""

# A atribui√ß√£o Cria √© feita diretamente e cria e inicializa a vari√°vel
x = 36
y = "hello"
z = 3.45

# Imprimindo os resultados
print(type(x), '  x = ', x)
print(type(y), '  y = ', y)
print(type(z), 'z = ', z)

"""Tipos de dados
* Tipos b√°sicos
  *  Inteiro
  *  Float
  *  Booleano
  *  N√∫meros complexos
"""

# Fun√ß√µes internas para converter entre tipos
x = 1.89
y = int(x)
z = str(x)
r = True
s = 3 + 4j

print("x =", x, "| tipo: ", type(x))
print("y =", y, "   | tipo: ", type(y))
print("z =", z, "| tipo: ", type(z))
print("z =", r, "| tipo: ", type(r))
print("z =", s, "| tipo: ", type(s))

"""## Operadores"""

# Compara√ß√£o √© feita usando os operadores convencionais <, >, ==, !=, ...
x, y = 4, 6
z, w = "Ola", "Ola"

comparacao1 = y == x
print(comparacao1)

comparacao2 = (x==y or z==w)
print(comparacao2)

#Exemplo de aritm√©tica com strings

y = "Ol√°"
x = y + ' Mundo'
print(x)

z = "J√° pode sair?"
w = 5*z
print(w)

# Atribui√ß√£o de refer√™ncia ao objeto e n√£o do valor
x = [1, 2, 3, 4]
y = x

# Assim quando modificamos x, modificamos o valor mostrado em y tamb√©m e vice-versa
y.append(5)
print("\nInserido o elemento 5 via vari√°vel y")
print("x = ",  x)
print("y = ", y)

x.append(7)
print("\nInserido o elemento 7 via vari√°vel x")
print("x = ",  x)
print("y = ", y)

"""Tipos de dados sequ√™ncias 
* Tuplas
* Lista
* String

Tuplas:

*   Definida entre par√™nteses - ()
*   Sequ√™ncia de elementos que podem ser de tipos distintos
*   Ap√≥s criada, elementos n√£o podem ser alterados
"""

# Tuplas
# Declara√ß√£o utiliza par√™nteses () e pode ser de tipos distintos
t1 = (1, 2, 3, "cinco", 7.0)
print(type(t1), "|", t1)


# Se n√£o colocar par√™nteses tamb√©m aceita
t2 = 7,8,"9", True, (1, 2, 3, 4)
print(type(t2), "|", t2)

# acessando um elemento da tupla via []
print(type(t1[0]), "  | t1[0] = ", t1[0])
print(type(t1[3]), "  | t1[3] = ", t1[3])
print(type(t2[3]), " | t2[3] = ", t2[3])
print(type(t2[4]), "| t2[4] = ", t2[4])
print(type(t2[4][1]), "  | t2[4][1] = ", t2[4][1])

# Se terntar inserir ou modificar um elemento na tupla, gera erro
t1[1] = 7

# "Somando" duas tuplas
t3 = t1 + t2
print(type(t3))
print(t3)

"""Listas:

*  Definida entre colchetes - []
*  Elementos podem ser modificados, adicionados e removidos
"""

# Listas
# Atribui√ß√£o para listas - []
l1 = [2, 4, 3, 5]
l2 = [2, "3"]

print(type(l1), "|", l1)
print(type(l2), "|", l2)

# acessando um elemento
print(type(l2), "|", l2)
print(type(l2[1]), "|", l2[1])

#Com listas podemos modificar os valores
print("l1 = ", l1)

l1[1] = "1"

print("l1 = ", l1)

#Somando listas
l3 = l1 + l2
print("l3 = ", l3)

# Removendo elementos de listas

# Localiza o elemento de valor 2 e remove
# Havendo repeti√ß√£o, remove o primeiro que encontrar
l3.remove(2)
print("l3 = ", l3)

# Adicionando item

#Adiciona o elemento no final da lista
l3.append(2)
print("l3 = ", l3)

# insert(pos, valor): isere o elemento "valor" na posi√ß√£o "pos" da lista
l3.insert(2, 20)
print("l3 = ", l3)

# Ordenando listas, vai dar erro
l3.sort()
print("l3 = ", l3)

# Removendo os strings, teremos s√≥ um tipo de dados
l3.remove('1')
l3.remove('3')

print("antes ordena√ß√£o")
print(l3)

# Agora podemos ordena
l3.sort()

print("\nap√≥s ordena√ß√£o")
print(l3)

# Ou s√≥ com strings
Letras = ['a', 'd', 'c']
Letras.sort()
print(Letras)

"""Strings

*  definida entre apas simples ('') ou duplas ("")
*  Conceitualmente similares a tuplas
*  Elementos s√£o caracteres
"""

# String
# Atrbui√ß√£o de strings
str1 = "Ol√°"

print(type(str1), str1)
print(type(str1[0]), str1[0])

# n√£o pode editar depois de criada, similar √† tupla
str1[0] = "x"

"""## Resumo tuplas, listas e strings
*  Os elementos de uma tupla, lista ou string podem ser acessados utilizando colchetes [ ] de forma indexada.

*  O √≠ndice dos elementos varia de 0 at√© ùëõ‚àí1, onde ùëõ √© o n√∫mero de elementos na sequ√™ncia.

*  OBS: Tuplas e strings s√£o imut√°veis (seus valores s√£o fixos), Listas s√£o mut√°veis (√© poss√≠vel alterar seus valores)

## Tipos de dados dicion√°rios

* Criados usando cahves - {}
* Mapeamento Chave:valores
   * Chave pode ser qualquer tipo imut√°vel
   * Valores podem ser de qualquer tipo
* Pares chave/valores podem ser modificados, visualizados e apagados
"""

# dicion√°rios
# Atribui√ß√£o
d1 = {'chave1': 4.0,
     'chave2': 23,
     'chave3': 'Outro valor',
     'chave4': (1,2,3,4)}

print(type(d1), d1)

# Acessando valores a partir da chave
print("chave1 = ", d1['chave1'], "         | tipo:", type(d1['chave1']))
print("chave2 = ", d1['chave2'], "          | tipo:", type(d1['chave2']))
print("chave3 = ", d1['chave3'], " | tipo:", type(d1['chave3']))
print("chave4 = ", d1['chave4'], "| tipo:", type(d1['chave4']))

print(d1)

# dada a chave, se ela n√£o existe, cria uma nova
d1[5] = 'cinco'
print(d1)

#se j√° exsite, atualiza o valor
d1[5] = [5]
print(d1)

#Removendo item
del d1['chave4']
print(d1)

#itens
itens = d1.items()
print(type(itens), '|', itens)

# Propriedaes
# Chaves
chaves = d1.keys()
print(type(chaves), '|', chaves)

# Valores
valores = d1.values()
print(type(valores), '|', valores)

# criando um dicionario
d = {1: 'um', 2: 'dois', 3:'tres'}
for key, value in d.items():
  print(key, '-->', value)

"""## Exemplos"""

#dicionar√≠o de n√∫meros √≠mpares e pares

my_list = [0,1,2,3,4,5,6,7,8,9, 10, 11, 12, 13, 14, 15]

# dicion√°rio vazio
Numeros = {}

for val in my_list:
    if val%2 == 0:
        Numeros[val] = 'Par'
    else:
        Numeros[val] = 'Impar'  

print(Numeros)

"""## Incluindo m√≥dulos"""

# colocar mais exemplos mostrar o caminho para achar as fun√ß√µes

import  statistics as st
lista = [10,9,7]

media = st.mean(lista)
desviopadrao = st.pstdev(lista)
variancia = st.variance(lista)
mediana = st.median(lista)

print("Media = ", media)
print("Mediana = ", mediana)
print("Desvio padr√£o = ", desviopadrao)
print("Vari√¢ncia = ", variancia)

from statistics import mean
lista = [10,9,7]

media = mean(lista)
# Vai dar erro
desviopadrao = pstdev(lista)

from statistics import mean
lista = [10,9,7]

media = mean(lista)

print(media)

"""## Exemplos"""

# verificando o n√∫mero de ocorr√™ncia de uma letra dada uma string
from collections import Counter
minha_string = "scientia vinces"

# dicionario de ocorr√™ncias
ocor = {}

# Para cadas elemento (caractere) da palavra, verifica se est√° no dicion√°rio
# Se √© a primeira vez que econtrou, come√ßa a contagem
# Sen√£o, incrementa
for letra in minha_string: 
    if letra not in ocor:
        ocor[letra] = 1
    else:
        ocor[letra] += 1

print(ocor)

# Por√©m a fun√ß√£o j√° est√° implementada em python
Counter(minha_string)

"""## Exemplo Corretor ortogr√°fico"""

# Cria dicion√°rio para corre√ß√£o
Corretor = {}

# Incluir corre√ß√£o para a varia√ß√£o da palavra casa
palavra = "p√£o"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}
for chave in Termo:
  Corretor[chave] = Termo[chave]

# Incluir corre√ß√£o para a varia√ß√£o da palavra casa
palavra = "de"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}
for chave in Termo:
  Corretor[chave] = Termo[chave]


# Incluir corre√ß√£o para a varia√ß√£o da palavra casa
palavra = "queijo"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}
for chave in Termo:
  Corretor[chave] = Termo[chave]


# Incluir corre√ß√£o para a varia√ß√£o da palavra casa
palavra = "casa"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}

for chave in Termo:
  Corretor[chave] = Termo[chave]

# Trem
palavra = "trem"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}

for chave in Termo:
  Corretor[chave] = Termo[chave]

# bom
palavra = "bom"
Termo = {palavra[0:x] + palavra[x+1:len(palavra)]:palavra for x in range(0, len(palavra))}

for chave in Termo:
  Corretor[chave] = Termo[chave]

print(Corretor)

frase = ['p√£o', 'de', 'quijo', '√©', 'um', 'trem', 'bm']

#Consultando o corretor
cont = 0
for palavra in frase:
  if palavra in Corretor:
    frase[cont] = Corretor[palavra]
  cont += 1 
  
print(frase)

Corrigido = ''

# transformando em string
for palavra in frase:
  Corrigido += palavra + ' '

print(Corrigido)
